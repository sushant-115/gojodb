// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql_service

// This file will not be regenerated automatically.
//
// It serves as blueprint for your Go types.
//
// Because this file is code-generated and contains `type Entry struct`,
// you can just copy this over to a `models.go` file (or similar)
// and then populate the `Entry` struct with your actual database fields.
//
// For example, if you have a `User` struct in your database,
// you would define it in `models.go` and then use it in your schema.
//
// type User struct {
//   ID   string
//   Name string
// }
//
// Then, in your `schema.graphql`, you would define:
//
// type User {
//   id: ID!
//   name: String!
// }
//
// And in your `resolver.go`, you would implement the resolver for `User`.
//
// For now, we are defining a simple Entry type that maps to our key-value store.

// Entry represents a key-value pair in GojoDB.
type Entry struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// Input types if needed for mutations (e.g., putEntryInput)
// For simple key/value, direct arguments are often sufficient.
