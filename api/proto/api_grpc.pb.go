// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayService_Put_FullMethodName                          = "/proto.GatewayService/Put"
	GatewayService_Get_FullMethodName                          = "/proto.GatewayService/Get"
	GatewayService_Delete_FullMethodName                       = "/proto.GatewayService/Delete"
	GatewayService_GetRange_FullMethodName                     = "/proto.GatewayService/GetRange"
	GatewayService_TextSearch_FullMethodName                   = "/proto.GatewayService/TextSearch"
	GatewayService_BulkPut_FullMethodName                      = "/proto.GatewayService/BulkPut"
	GatewayService_BulkDelete_FullMethodName                   = "/proto.GatewayService/BulkDelete"
	GatewayService_AddStorageNode_FullMethodName               = "/proto.GatewayService/AddStorageNode"
	GatewayService_RemoveStorageNode_FullMethodName            = "/proto.GatewayService/RemoveStorageNode"
	GatewayService_AssignShardSlot_FullMethodName              = "/proto.GatewayService/AssignShardSlot"
	GatewayService_InitiateReplicaOnboarding_FullMethodName    = "/proto.GatewayService/InitiateReplicaOnboarding"
	GatewayService_UpdateReplicaOnboardingState_FullMethodName = "/proto.GatewayService/UpdateReplicaOnboardingState"
	GatewayService_InitiateShardMigration_FullMethodName       = "/proto.GatewayService/InitiateShardMigration"
	GatewayService_CommitShardMigration_FullMethodName         = "/proto.GatewayService/CommitShardMigration"
	GatewayService_GetClusterStatus_FullMethodName             = "/proto.GatewayService/GetClusterStatus"
	GatewayService_GetShardMap_FullMethodName                  = "/proto.GatewayService/GetShardMap"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	// Data operations
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error)
	TextSearch(ctx context.Context, in *TextSearchRequest, opts ...grpc.CallOption) (*TextSearchResponse, error)
	BulkPut(ctx context.Context, in *BulkPutRequest, opts ...grpc.CallOption) (*BulkPutResponse, error)
	BulkDelete(ctx context.Context, in *BulkDeleteRequest, opts ...grpc.CallOption) (*BulkDeleteResponse, error)
	// Cluster management operations
	AddStorageNode(ctx context.Context, in *AddStorageNodeRequest, opts ...grpc.CallOption) (*AddStorageNodeResponse, error)
	RemoveStorageNode(ctx context.Context, in *RemoveStorageNodeRequest, opts ...grpc.CallOption) (*RemoveStorageNodeResponse, error)
	AssignShardSlot(ctx context.Context, in *AssignShardSlotRequest, opts ...grpc.CallOption) (*AssignShardSlotResponse, error)
	InitiateReplicaOnboarding(ctx context.Context, in *InitiateReplicaOnboardingRequest, opts ...grpc.CallOption) (*InitiateReplicaOnboardingResponse, error)
	UpdateReplicaOnboardingState(ctx context.Context, in *UpdateReplicaOnboardingStateRequest, opts ...grpc.CallOption) (*UpdateReplicaOnboardingStateResponse, error)
	InitiateShardMigration(ctx context.Context, in *InitiateShardMigrationRequest, opts ...grpc.CallOption) (*InitiateShardMigrationResponse, error)
	CommitShardMigration(ctx context.Context, in *CommitShardMigrationRequest, opts ...grpc.CallOption) (*CommitShardMigrationResponse, error)
	GetClusterStatus(ctx context.Context, in *GetClusterStatusRequest, opts ...grpc.CallOption) (*GetClusterStatusResponse, error)
	GetShardMap(ctx context.Context, in *GetShardMapRequest, opts ...grpc.CallOption) (*GetShardMapResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

type GatewayServiceClientImpl struct {
	gatewayServiceClient
	conn *grpc.ClientConn
}

func NewGatewayServiceClient(conn *grpc.ClientConn) *GatewayServiceClientImpl {
	return &GatewayServiceClientImpl{
		conn: conn,
	}
}

func (c *gatewayServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, GatewayService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, GatewayService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, GatewayService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRangeResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) TextSearch(ctx context.Context, in *TextSearchRequest, opts ...grpc.CallOption) (*TextSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextSearchResponse)
	err := c.cc.Invoke(ctx, GatewayService_TextSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) BulkPut(ctx context.Context, in *BulkPutRequest, opts ...grpc.CallOption) (*BulkPutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkPutResponse)
	err := c.cc.Invoke(ctx, GatewayService_BulkPut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) BulkDelete(ctx context.Context, in *BulkDeleteRequest, opts ...grpc.CallOption) (*BulkDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkDeleteResponse)
	err := c.cc.Invoke(ctx, GatewayService_BulkDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AddStorageNode(ctx context.Context, in *AddStorageNodeRequest, opts ...grpc.CallOption) (*AddStorageNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStorageNodeResponse)
	err := c.cc.Invoke(ctx, GatewayService_AddStorageNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RemoveStorageNode(ctx context.Context, in *RemoveStorageNodeRequest, opts ...grpc.CallOption) (*RemoveStorageNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStorageNodeResponse)
	err := c.cc.Invoke(ctx, GatewayService_RemoveStorageNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AssignShardSlot(ctx context.Context, in *AssignShardSlotRequest, opts ...grpc.CallOption) (*AssignShardSlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignShardSlotResponse)
	err := c.cc.Invoke(ctx, GatewayService_AssignShardSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) InitiateReplicaOnboarding(ctx context.Context, in *InitiateReplicaOnboardingRequest, opts ...grpc.CallOption) (*InitiateReplicaOnboardingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateReplicaOnboardingResponse)
	err := c.cc.Invoke(ctx, GatewayService_InitiateReplicaOnboarding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateReplicaOnboardingState(ctx context.Context, in *UpdateReplicaOnboardingStateRequest, opts ...grpc.CallOption) (*UpdateReplicaOnboardingStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReplicaOnboardingStateResponse)
	err := c.cc.Invoke(ctx, GatewayService_UpdateReplicaOnboardingState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) InitiateShardMigration(ctx context.Context, in *InitiateShardMigrationRequest, opts ...grpc.CallOption) (*InitiateShardMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateShardMigrationResponse)
	err := c.cc.Invoke(ctx, GatewayService_InitiateShardMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CommitShardMigration(ctx context.Context, in *CommitShardMigrationRequest, opts ...grpc.CallOption) (*CommitShardMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitShardMigrationResponse)
	err := c.cc.Invoke(ctx, GatewayService_CommitShardMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetClusterStatus(ctx context.Context, in *GetClusterStatusRequest, opts ...grpc.CallOption) (*GetClusterStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterStatusResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetClusterStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetShardMap(ctx context.Context, in *GetShardMapRequest, opts ...grpc.CallOption) (*GetShardMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShardMapResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetShardMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility.
type GatewayServiceServer interface {
	// Data operations
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error)
	TextSearch(context.Context, *TextSearchRequest) (*TextSearchResponse, error)
	BulkPut(context.Context, *BulkPutRequest) (*BulkPutResponse, error)
	BulkDelete(context.Context, *BulkDeleteRequest) (*BulkDeleteResponse, error)
	// Cluster management operations
	AddStorageNode(context.Context, *AddStorageNodeRequest) (*AddStorageNodeResponse, error)
	RemoveStorageNode(context.Context, *RemoveStorageNodeRequest) (*RemoveStorageNodeResponse, error)
	AssignShardSlot(context.Context, *AssignShardSlotRequest) (*AssignShardSlotResponse, error)
	InitiateReplicaOnboarding(context.Context, *InitiateReplicaOnboardingRequest) (*InitiateReplicaOnboardingResponse, error)
	UpdateReplicaOnboardingState(context.Context, *UpdateReplicaOnboardingStateRequest) (*UpdateReplicaOnboardingStateResponse, error)
	InitiateShardMigration(context.Context, *InitiateShardMigrationRequest) (*InitiateShardMigrationResponse, error)
	CommitShardMigration(context.Context, *CommitShardMigrationRequest) (*CommitShardMigrationResponse, error)
	GetClusterStatus(context.Context, *GetClusterStatusRequest) (*GetClusterStatusResponse, error)
	GetShardMap(context.Context, *GetShardMapRequest) (*GetShardMapResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServiceServer struct{}

func (UnimplementedGatewayServiceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedGatewayServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGatewayServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGatewayServiceServer) GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (UnimplementedGatewayServiceServer) TextSearch(context.Context, *TextSearchRequest) (*TextSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextSearch not implemented")
}
func (UnimplementedGatewayServiceServer) BulkPut(context.Context, *BulkPutRequest) (*BulkPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkPut not implemented")
}
func (UnimplementedGatewayServiceServer) BulkDelete(context.Context, *BulkDeleteRequest) (*BulkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDelete not implemented")
}
func (UnimplementedGatewayServiceServer) AddStorageNode(context.Context, *AddStorageNodeRequest) (*AddStorageNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStorageNode not implemented")
}
func (UnimplementedGatewayServiceServer) RemoveStorageNode(context.Context, *RemoveStorageNodeRequest) (*RemoveStorageNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStorageNode not implemented")
}
func (UnimplementedGatewayServiceServer) AssignShardSlot(context.Context, *AssignShardSlotRequest) (*AssignShardSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignShardSlot not implemented")
}
func (UnimplementedGatewayServiceServer) InitiateReplicaOnboarding(context.Context, *InitiateReplicaOnboardingRequest) (*InitiateReplicaOnboardingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateReplicaOnboarding not implemented")
}
func (UnimplementedGatewayServiceServer) UpdateReplicaOnboardingState(context.Context, *UpdateReplicaOnboardingStateRequest) (*UpdateReplicaOnboardingStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReplicaOnboardingState not implemented")
}
func (UnimplementedGatewayServiceServer) InitiateShardMigration(context.Context, *InitiateShardMigrationRequest) (*InitiateShardMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateShardMigration not implemented")
}
func (UnimplementedGatewayServiceServer) CommitShardMigration(context.Context, *CommitShardMigrationRequest) (*CommitShardMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitShardMigration not implemented")
}
func (UnimplementedGatewayServiceServer) GetClusterStatus(context.Context, *GetClusterStatusRequest) (*GetClusterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStatus not implemented")
}
func (UnimplementedGatewayServiceServer) GetShardMap(context.Context, *GetShardMapRequest) (*GetShardMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardMap not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}
func (UnimplementedGatewayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetRange(ctx, req.(*GetRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_TextSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).TextSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_TextSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).TextSearch(ctx, req.(*TextSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_BulkPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).BulkPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_BulkPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).BulkPut(ctx, req.(*BulkPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_BulkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).BulkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_BulkDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).BulkDelete(ctx, req.(*BulkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AddStorageNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStorageNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AddStorageNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AddStorageNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AddStorageNode(ctx, req.(*AddStorageNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RemoveStorageNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStorageNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RemoveStorageNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_RemoveStorageNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RemoveStorageNode(ctx, req.(*RemoveStorageNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AssignShardSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignShardSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AssignShardSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AssignShardSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AssignShardSlot(ctx, req.(*AssignShardSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_InitiateReplicaOnboarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateReplicaOnboardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).InitiateReplicaOnboarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_InitiateReplicaOnboarding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).InitiateReplicaOnboarding(ctx, req.(*InitiateReplicaOnboardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateReplicaOnboardingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplicaOnboardingStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateReplicaOnboardingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UpdateReplicaOnboardingState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateReplicaOnboardingState(ctx, req.(*UpdateReplicaOnboardingStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_InitiateShardMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateShardMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).InitiateShardMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_InitiateShardMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).InitiateShardMigration(ctx, req.(*InitiateShardMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CommitShardMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitShardMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CommitShardMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CommitShardMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CommitShardMigration(ctx, req.(*CommitShardMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetClusterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetClusterStatus(ctx, req.(*GetClusterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetShardMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetShardMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetShardMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetShardMap(ctx, req.(*GetShardMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _GatewayService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GatewayService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayService_Delete_Handler,
		},
		{
			MethodName: "GetRange",
			Handler:    _GatewayService_GetRange_Handler,
		},
		{
			MethodName: "TextSearch",
			Handler:    _GatewayService_TextSearch_Handler,
		},
		{
			MethodName: "BulkPut",
			Handler:    _GatewayService_BulkPut_Handler,
		},
		{
			MethodName: "BulkDelete",
			Handler:    _GatewayService_BulkDelete_Handler,
		},
		{
			MethodName: "AddStorageNode",
			Handler:    _GatewayService_AddStorageNode_Handler,
		},
		{
			MethodName: "RemoveStorageNode",
			Handler:    _GatewayService_RemoveStorageNode_Handler,
		},
		{
			MethodName: "AssignShardSlot",
			Handler:    _GatewayService_AssignShardSlot_Handler,
		},
		{
			MethodName: "InitiateReplicaOnboarding",
			Handler:    _GatewayService_InitiateReplicaOnboarding_Handler,
		},
		{
			MethodName: "UpdateReplicaOnboardingState",
			Handler:    _GatewayService_UpdateReplicaOnboardingState_Handler,
		},
		{
			MethodName: "InitiateShardMigration",
			Handler:    _GatewayService_InitiateShardMigration_Handler,
		},
		{
			MethodName: "CommitShardMigration",
			Handler:    _GatewayService_CommitShardMigration_Handler,
		},
		{
			MethodName: "GetClusterStatus",
			Handler:    _GatewayService_GetClusterStatus_Handler,
		},
		{
			MethodName: "GetShardMap",
			Handler:    _GatewayService_GetShardMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	SnapshotService_StreamSnapshot_FullMethodName = "/proto.SnapshotService/StreamSnapshot"
)

// SnapshotServiceClient is the client API for SnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotServiceClient interface {
	// StreamSnapshot streams a prepared snapshot from a storage node.
	StreamSnapshot(ctx context.Context, in *StreamSnapshotRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamSnapshotResponse], error)
}

type snapshotServiceClient struct {
	cc grpc.ClientConnInterface
}


func (c *snapshotServiceClient) StreamSnapshot(ctx context.Context, in *StreamSnapshotRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamSnapshotResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnapshotService_ServiceDesc.Streams[0], SnapshotService_StreamSnapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamSnapshotRequest, StreamSnapshotResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnapshotService_StreamSnapshotClient = grpc.ServerStreamingClient[StreamSnapshotResponse]

// SnapshotServiceServer is the server API for SnapshotService service.
// All implementations must embed UnimplementedSnapshotServiceServer
// for forward compatibility.
type SnapshotServiceServer interface {
	// StreamSnapshot streams a prepared snapshot from a storage node.
	StreamSnapshot(*StreamSnapshotRequest, grpc.ServerStreamingServer[StreamSnapshotResponse]) error
	mustEmbedUnimplementedSnapshotServiceServer()
}

// UnimplementedSnapshotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnapshotServiceServer struct{}

func (UnimplementedSnapshotServiceServer) StreamSnapshot(*StreamSnapshotRequest, grpc.ServerStreamingServer[StreamSnapshotResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) mustEmbedUnimplementedSnapshotServiceServer() {}
func (UnimplementedSnapshotServiceServer) testEmbeddedByValue()                         {}

// UnsafeSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServiceServer will
// result in compilation errors.
type UnsafeSnapshotServiceServer interface {
	mustEmbedUnimplementedSnapshotServiceServer()
}

func RegisterSnapshotServiceServer(s grpc.ServiceRegistrar, srv SnapshotServiceServer) {
	// If the following call pancis, it indicates UnimplementedSnapshotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnapshotService_ServiceDesc, srv)
}

func _SnapshotService_StreamSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotServiceServer).StreamSnapshot(m, &grpc.GenericServerStream[StreamSnapshotRequest, StreamSnapshotResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnapshotService_StreamSnapshotServer = grpc.ServerStreamingServer[StreamSnapshotResponse]

// SnapshotService_ServiceDesc is the grpc.ServiceDesc for SnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SnapshotService",
	HandlerType: (*SnapshotServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSnapshot",
			Handler:       _SnapshotService_StreamSnapshot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
