// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IndexedWriteService_IndexedWrite_FullMethodName        = "/proto.IndexedWriteService/IndexedWrite"
	IndexedWriteService_UpdateInvertedIndex_FullMethodName = "/proto.IndexedWriteService/UpdateInvertedIndex"
	IndexedWriteService_UpdateSpatialIndex_FullMethodName  = "/proto.IndexedWriteService/UpdateSpatialIndex"
	IndexedWriteService_DeleteDocument_FullMethodName      = "/proto.IndexedWriteService/DeleteDocument"
)

// IndexedWriteServiceClient is the client API for IndexedWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Indexed Writes Service ---
type IndexedWriteServiceClient interface {
	// Writes (inserts or updates) a single document and updates all relevant indexes.
	IndexedWrite(ctx context.Context, in *IndexedWriteRequest, opts ...grpc.CallOption) (*WriteResult, error)
	// Specifically updates the inverted index (e.g., adding terms for a document).
	// This might be used internally or for fine-grained control.
	UpdateInvertedIndex(ctx context.Context, in *UpdateInvertedIndexRequest, opts ...grpc.CallOption) (*WriteResult, error)
	// Specifically updates the spatial index (e.g., adding a geo-shape for a document).
	UpdateSpatialIndex(ctx context.Context, in *UpdateSpatialIndexRequest, opts ...grpc.CallOption) (*WriteResult, error)
	// Deletes a document by ID and removes its entries from all indexes.
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*WriteResult, error)
}

type indexedWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexedWriteServiceClient(cc grpc.ClientConnInterface) IndexedWriteServiceClient {
	return &indexedWriteServiceClient{cc}
}

func (c *indexedWriteServiceClient) IndexedWrite(ctx context.Context, in *IndexedWriteRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResult)
	err := c.cc.Invoke(ctx, IndexedWriteService_IndexedWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexedWriteServiceClient) UpdateInvertedIndex(ctx context.Context, in *UpdateInvertedIndexRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResult)
	err := c.cc.Invoke(ctx, IndexedWriteService_UpdateInvertedIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexedWriteServiceClient) UpdateSpatialIndex(ctx context.Context, in *UpdateSpatialIndexRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResult)
	err := c.cc.Invoke(ctx, IndexedWriteService_UpdateSpatialIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexedWriteServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*WriteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResult)
	err := c.cc.Invoke(ctx, IndexedWriteService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexedWriteServiceServer is the server API for IndexedWriteService service.
// All implementations must embed UnimplementedIndexedWriteServiceServer
// for forward compatibility.
//
// --- Indexed Writes Service ---
type IndexedWriteServiceServer interface {
	// Writes (inserts or updates) a single document and updates all relevant indexes.
	IndexedWrite(context.Context, *IndexedWriteRequest) (*WriteResult, error)
	// Specifically updates the inverted index (e.g., adding terms for a document).
	// This might be used internally or for fine-grained control.
	UpdateInvertedIndex(context.Context, *UpdateInvertedIndexRequest) (*WriteResult, error)
	// Specifically updates the spatial index (e.g., adding a geo-shape for a document).
	UpdateSpatialIndex(context.Context, *UpdateSpatialIndexRequest) (*WriteResult, error)
	// Deletes a document by ID and removes its entries from all indexes.
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*WriteResult, error)
	mustEmbedUnimplementedIndexedWriteServiceServer()
}

// UnimplementedIndexedWriteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexedWriteServiceServer struct{}

func (UnimplementedIndexedWriteServiceServer) IndexedWrite(context.Context, *IndexedWriteRequest) (*WriteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexedWrite not implemented")
}
func (UnimplementedIndexedWriteServiceServer) UpdateInvertedIndex(context.Context, *UpdateInvertedIndexRequest) (*WriteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvertedIndex not implemented")
}
func (UnimplementedIndexedWriteServiceServer) UpdateSpatialIndex(context.Context, *UpdateSpatialIndexRequest) (*WriteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpatialIndex not implemented")
}
func (UnimplementedIndexedWriteServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*WriteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedIndexedWriteServiceServer) mustEmbedUnimplementedIndexedWriteServiceServer() {}
func (UnimplementedIndexedWriteServiceServer) testEmbeddedByValue()                             {}

// UnsafeIndexedWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexedWriteServiceServer will
// result in compilation errors.
type UnsafeIndexedWriteServiceServer interface {
	mustEmbedUnimplementedIndexedWriteServiceServer()
}

func RegisterIndexedWriteServiceServer(s grpc.ServiceRegistrar, srv IndexedWriteServiceServer) {
	// If the following call pancis, it indicates UnimplementedIndexedWriteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IndexedWriteService_ServiceDesc, srv)
}

func _IndexedWriteService_IndexedWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexedWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexedWriteServiceServer).IndexedWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexedWriteService_IndexedWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexedWriteServiceServer).IndexedWrite(ctx, req.(*IndexedWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexedWriteService_UpdateInvertedIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvertedIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexedWriteServiceServer).UpdateInvertedIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexedWriteService_UpdateInvertedIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexedWriteServiceServer).UpdateInvertedIndex(ctx, req.(*UpdateInvertedIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexedWriteService_UpdateSpatialIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpatialIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexedWriteServiceServer).UpdateSpatialIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexedWriteService_UpdateSpatialIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexedWriteServiceServer).UpdateSpatialIndex(ctx, req.(*UpdateSpatialIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexedWriteService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexedWriteServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexedWriteService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexedWriteServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexedWriteService_ServiceDesc is the grpc.ServiceDesc for IndexedWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexedWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IndexedWriteService",
	HandlerType: (*IndexedWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IndexedWrite",
			Handler:    _IndexedWriteService_IndexedWrite_Handler,
		},
		{
			MethodName: "UpdateInvertedIndex",
			Handler:    _IndexedWriteService_UpdateInvertedIndex_Handler,
		},
		{
			MethodName: "UpdateSpatialIndex",
			Handler:    _IndexedWriteService_UpdateSpatialIndex_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _IndexedWriteService_DeleteDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	IndexedReadService_GetDocument_FullMethodName         = "/proto.IndexedReadService/GetDocument"
	IndexedReadService_SearchInvertedIndex_FullMethodName = "/proto.IndexedReadService/SearchInvertedIndex"
	IndexedReadService_SearchSpatialIndex_FullMethodName  = "/proto.IndexedReadService/SearchSpatialIndex"
	IndexedReadService_RangeScan_FullMethodName           = "/proto.IndexedReadService/RangeScan"
)

// IndexedReadServiceClient is the client API for IndexedReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Indexed Reads Service ---
type IndexedReadServiceClient interface {
	// Reads a single document by its ID from the primary B-Tree store.
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// Performs a search using the inverted index.
	SearchInvertedIndex(ctx context.Context, in *SearchInvertedIndexRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Performs a search using the spatial index.
	SearchSpatialIndex(ctx context.Context, in *SearchSpatialIndexRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Performs a range scan on the primary B-Tree index.
	RangeScan(ctx context.Context, in *RangeScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Document], error)
}

type indexedReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexedReadServiceClient(cc grpc.ClientConnInterface) IndexedReadServiceClient {
	return &indexedReadServiceClient{cc}
}

func (c *indexedReadServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, IndexedReadService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexedReadServiceClient) SearchInvertedIndex(ctx context.Context, in *SearchInvertedIndexRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, IndexedReadService_SearchInvertedIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexedReadServiceClient) SearchSpatialIndex(ctx context.Context, in *SearchSpatialIndexRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, IndexedReadService_SearchSpatialIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexedReadServiceClient) RangeScan(ctx context.Context, in *RangeScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Document], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IndexedReadService_ServiceDesc.Streams[0], IndexedReadService_RangeScan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RangeScanRequest, Document]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexedReadService_RangeScanClient = grpc.ServerStreamingClient[Document]

// IndexedReadServiceServer is the server API for IndexedReadService service.
// All implementations must embed UnimplementedIndexedReadServiceServer
// for forward compatibility.
//
// --- Indexed Reads Service ---
type IndexedReadServiceServer interface {
	// Reads a single document by its ID from the primary B-Tree store.
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// Performs a search using the inverted index.
	SearchInvertedIndex(context.Context, *SearchInvertedIndexRequest) (*SearchResponse, error)
	// Performs a search using the spatial index.
	SearchSpatialIndex(context.Context, *SearchSpatialIndexRequest) (*SearchResponse, error)
	// Performs a range scan on the primary B-Tree index.
	RangeScan(*RangeScanRequest, grpc.ServerStreamingServer[Document]) error
	mustEmbedUnimplementedIndexedReadServiceServer()
}

// UnimplementedIndexedReadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexedReadServiceServer struct{}

func (UnimplementedIndexedReadServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedIndexedReadServiceServer) SearchInvertedIndex(context.Context, *SearchInvertedIndexRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInvertedIndex not implemented")
}
func (UnimplementedIndexedReadServiceServer) SearchSpatialIndex(context.Context, *SearchSpatialIndexRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSpatialIndex not implemented")
}
func (UnimplementedIndexedReadServiceServer) RangeScan(*RangeScanRequest, grpc.ServerStreamingServer[Document]) error {
	return status.Errorf(codes.Unimplemented, "method RangeScan not implemented")
}
func (UnimplementedIndexedReadServiceServer) mustEmbedUnimplementedIndexedReadServiceServer() {}
func (UnimplementedIndexedReadServiceServer) testEmbeddedByValue()                            {}

// UnsafeIndexedReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexedReadServiceServer will
// result in compilation errors.
type UnsafeIndexedReadServiceServer interface {
	mustEmbedUnimplementedIndexedReadServiceServer()
}

func RegisterIndexedReadServiceServer(s grpc.ServiceRegistrar, srv IndexedReadServiceServer) {
	// If the following call pancis, it indicates UnimplementedIndexedReadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IndexedReadService_ServiceDesc, srv)
}

func _IndexedReadService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexedReadServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexedReadService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexedReadServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexedReadService_SearchInvertedIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInvertedIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexedReadServiceServer).SearchInvertedIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexedReadService_SearchInvertedIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexedReadServiceServer).SearchInvertedIndex(ctx, req.(*SearchInvertedIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexedReadService_SearchSpatialIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSpatialIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexedReadServiceServer).SearchSpatialIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexedReadService_SearchSpatialIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexedReadServiceServer).SearchSpatialIndex(ctx, req.(*SearchSpatialIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexedReadService_RangeScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexedReadServiceServer).RangeScan(m, &grpc.GenericServerStream[RangeScanRequest, Document]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexedReadService_RangeScanServer = grpc.ServerStreamingServer[Document]

// IndexedReadService_ServiceDesc is the grpc.ServiceDesc for IndexedReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexedReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IndexedReadService",
	HandlerType: (*IndexedReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocument",
			Handler:    _IndexedReadService_GetDocument_Handler,
		},
		{
			MethodName: "SearchInvertedIndex",
			Handler:    _IndexedReadService_SearchInvertedIndex_Handler,
		},
		{
			MethodName: "SearchSpatialIndex",
			Handler:    _IndexedReadService_SearchSpatialIndex_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RangeScan",
			Handler:       _IndexedReadService_RangeScan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

const (
	BulkWriteService_BulkWrite_FullMethodName       = "/proto.BulkWriteService/BulkWrite"
	BulkWriteService_StreamBulkWrite_FullMethodName = "/proto.BulkWriteService/StreamBulkWrite"
)

// BulkWriteServiceClient is the client API for BulkWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Bulk Writes Service ---
type BulkWriteServiceClient interface {
	// Performs multiple write operations (insert, update, delete) in a batch.
	// Can be implemented as a single RPC call with a list, or a client-streaming RPC for very large batches.
	// For simplicity, starting with a single call with a list.
	BulkWrite(ctx context.Context, in *BulkWriteRequest, opts ...grpc.CallOption) (*BulkWriteResponse, error)
	// Client-streaming version for potentially very large batches
	StreamBulkWrite(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BulkOperation, BulkWriteSummaryResponse], error)
}

type bulkWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBulkWriteServiceClient(cc grpc.ClientConnInterface) BulkWriteServiceClient {
	return &bulkWriteServiceClient{cc}
}

func (c *bulkWriteServiceClient) BulkWrite(ctx context.Context, in *BulkWriteRequest, opts ...grpc.CallOption) (*BulkWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkWriteResponse)
	err := c.cc.Invoke(ctx, BulkWriteService_BulkWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulkWriteServiceClient) StreamBulkWrite(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BulkOperation, BulkWriteSummaryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BulkWriteService_ServiceDesc.Streams[0], BulkWriteService_StreamBulkWrite_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BulkOperation, BulkWriteSummaryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BulkWriteService_StreamBulkWriteClient = grpc.ClientStreamingClient[BulkOperation, BulkWriteSummaryResponse]

// BulkWriteServiceServer is the server API for BulkWriteService service.
// All implementations must embed UnimplementedBulkWriteServiceServer
// for forward compatibility.
//
// --- Bulk Writes Service ---
type BulkWriteServiceServer interface {
	// Performs multiple write operations (insert, update, delete) in a batch.
	// Can be implemented as a single RPC call with a list, or a client-streaming RPC for very large batches.
	// For simplicity, starting with a single call with a list.
	BulkWrite(context.Context, *BulkWriteRequest) (*BulkWriteResponse, error)
	// Client-streaming version for potentially very large batches
	StreamBulkWrite(grpc.ClientStreamingServer[BulkOperation, BulkWriteSummaryResponse]) error
	mustEmbedUnimplementedBulkWriteServiceServer()
}

// UnimplementedBulkWriteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBulkWriteServiceServer struct{}

func (UnimplementedBulkWriteServiceServer) BulkWrite(context.Context, *BulkWriteRequest) (*BulkWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkWrite not implemented")
}
func (UnimplementedBulkWriteServiceServer) StreamBulkWrite(grpc.ClientStreamingServer[BulkOperation, BulkWriteSummaryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBulkWrite not implemented")
}
func (UnimplementedBulkWriteServiceServer) mustEmbedUnimplementedBulkWriteServiceServer() {}
func (UnimplementedBulkWriteServiceServer) testEmbeddedByValue()                          {}

// UnsafeBulkWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BulkWriteServiceServer will
// result in compilation errors.
type UnsafeBulkWriteServiceServer interface {
	mustEmbedUnimplementedBulkWriteServiceServer()
}

func RegisterBulkWriteServiceServer(s grpc.ServiceRegistrar, srv BulkWriteServiceServer) {
	// If the following call pancis, it indicates UnimplementedBulkWriteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BulkWriteService_ServiceDesc, srv)
}

func _BulkWriteService_BulkWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulkWriteServiceServer).BulkWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulkWriteService_BulkWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulkWriteServiceServer).BulkWrite(ctx, req.(*BulkWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulkWriteService_StreamBulkWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BulkWriteServiceServer).StreamBulkWrite(&grpc.GenericServerStream[BulkOperation, BulkWriteSummaryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BulkWriteService_StreamBulkWriteServer = grpc.ClientStreamingServer[BulkOperation, BulkWriteSummaryResponse]

// BulkWriteService_ServiceDesc is the grpc.ServiceDesc for BulkWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BulkWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BulkWriteService",
	HandlerType: (*BulkWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BulkWrite",
			Handler:    _BulkWriteService_BulkWrite_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBulkWrite",
			Handler:       _BulkWriteService_StreamBulkWrite_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

const (
	AggregationService_Aggregate_FullMethodName = "/proto.AggregationService/Aggregate"
)

// AggregationServiceClient is the client API for AggregationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Aggregation Service ---
type AggregationServiceClient interface {
	// Performs an aggregation query.
	Aggregate(ctx context.Context, in *AggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error)
}

type aggregationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregationServiceClient(cc grpc.ClientConnInterface) AggregationServiceClient {
	return &aggregationServiceClient{cc}
}

func (c *aggregationServiceClient) Aggregate(ctx context.Context, in *AggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregationResponse)
	err := c.cc.Invoke(ctx, AggregationService_Aggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregationServiceServer is the server API for AggregationService service.
// All implementations must embed UnimplementedAggregationServiceServer
// for forward compatibility.
//
// --- Aggregation Service ---
type AggregationServiceServer interface {
	// Performs an aggregation query.
	Aggregate(context.Context, *AggregationRequest) (*AggregationResponse, error)
	mustEmbedUnimplementedAggregationServiceServer()
}

// UnimplementedAggregationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregationServiceServer struct{}

func (UnimplementedAggregationServiceServer) Aggregate(context.Context, *AggregationRequest) (*AggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (UnimplementedAggregationServiceServer) mustEmbedUnimplementedAggregationServiceServer() {}
func (UnimplementedAggregationServiceServer) testEmbeddedByValue()                            {}

// UnsafeAggregationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregationServiceServer will
// result in compilation errors.
type UnsafeAggregationServiceServer interface {
	mustEmbedUnimplementedAggregationServiceServer()
}

func RegisterAggregationServiceServer(s grpc.ServiceRegistrar, srv AggregationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggregationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregationService_ServiceDesc, srv)
}

func _AggregationService_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServiceServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationService_Aggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServiceServer).Aggregate(ctx, req.(*AggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregationService_ServiceDesc is the grpc.ServiceDesc for AggregationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AggregationService",
	HandlerType: (*AggregationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Aggregate",
			Handler:    _AggregationService_Aggregate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
